None is a singleton, and any variable that stores None is really just a pointer/reference to None
    Its type is NoneType

Is is sometimes better than == when comparing two instances, especially when checking for None.
    This is because is checks not just equality, but also for identity.
    Is will return false if the types are not the same, even if their values are.
    == will return true if the types are not the same, but the values are.

Similar to None, Python has a cache of small integer values.
So, similar to None, a variable set to, say, integer 100 is just a reference to a precached integer object.
Therefore, if you do something like a, b = 100, 100, a is b will return true, as they are both pointing to that same object.
    Everytime you fetch integer = 100, it is the same object you are fetching
    This is true in CPython for -5 to 256.
But c, d = 1000, 1000 will yield c is d as false, as those are not precached integers.
(is operator assesses not just object equality, but also object identity.)

Bytecode can also do math while compiling, in order to simplify functions.
    Example, multiplying two constant integers together.
    B/c of this, sometimes it is WAY faster to return a calculated value, rather than storing it into a variable.
    This is called Constant Folding.

Python interpreter will allocate hunreds of thousands of objects to run even the smallest programs.
    With all the requests, a Python interpreter running a simple flask application has allocated 847 261 objects in total.
    Python has a very dynamic nature which comes at a cost. In order to support many features at runtime, 
        it allocates a lot of auxiliary objects.
    For example, I found out that a simple function definition allocates at least 
        five dictionaries, five tuples, and four lists that live until the end of a Python process. 
        In turn, all these objects allocate its members, e.g., integers, floats, and strings
    As a Python user, it may be good to be aware of all of these auxiliary allocations, in order to make optimizations
        by avoiding unneeded calls.

Attribute Lookup
    (It's just all dictionaries)
    In Python, all instance variables on objects are stored as a regular dictionary. 
        When working with attributes, you just changing a dictionary.

Inheritence Attribute Lookup
    Since every Python class implicitly inherits from object, there is always one level of inheritance.


List Comprehension vs For Loops
(https://stackoverflow.com/questions/30245397/why-is-a-list-comprehension-so-much-faster-than-appending-to-a-list)
List comprehension is basically just a "syntactic sugar" for the regular for loop. 
    In this case the reason that it performs better is because it doesn't need to load the 
    append attribute of the list and call it as a function at each iteration. 
    In other words and in general, list comprehensions perform faster because suspending and 
    resuming a function's frame, or multiple functions in other cases, is slower than creating a list on demand.
In [1]: def f1(): 
   ...:         l = [] 
   ...:         for i in range(5): 
   ...:             l.append(i) 
   ...:     
   ...:  
   ...: def f2(): 
   ...:     [i for i in range(5)] 