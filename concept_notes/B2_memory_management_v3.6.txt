notes from https://rushter.com/blog/python-memory-managment/
and https://docs.python.org/3/c-api/memory.html

To reduce overhead for small objects (less than 512 bytes) Python sub-allocates big blocks of memory. 
Larger objects are routed to standard C allocator. 
Small object allocator uses three levels of abstraction — 
    1. arena
    2. pool
    3. block.

1. block
Block is a chunk of memory of a certain size. Each block can keep only one Python object of a fixed size. 
The size of the block can vary from 8 to 512 bytes and must be a multiple of eight (i.e., use 8-byte alignment). 
For convenience, such blocks are grouped in 64 size classes.

2. pool

A collection of blocks of the same size is called a pool. 
Normally, the size of the pool is equal to the size of a memory page, i.e., 4Kb. 
Limiting pool to the fixed size of blocks helps with fragmentation. 
If an object gets destroyed, the memory manager can fill this space with a new object of the same size.

Each pool has a special header struct:

/* Pool for small blocks. */
struct pool_header {
    union { block *_padding;
            uint count; } ref;          /* number of allocated blocks    */
    block *freeblock;                   /* pool's free list head         */
    struct pool_header *nextpool;       /* next pool of this size class  */
    struct pool_header *prevpool;       /* previous pool       ""        */
    uint arenaindex;                    /* index into arenas of base adr */
    uint szidx;                         /* block size class index        */
    uint nextoffset;                    /* bytes to virgin block         */
    uint maxnextoffset;                 /* largest valid nextoffset      */
};

Pools of the same sized blocks are linked together using doubly linked list (the nextpool and prevpool fields). 
The szidx field keeps the size class index, whereas ref.count keeps the number of used blocks. 
The arenaindex stores the number of an arena in which Pool was created.

pool->freeblock points to the start of a singly-linked list of free blocks within the pool.
When a block is freed, it's inserted at the front of its pool's freeblock list. 

Note
that the available blocks in a pool are *not* linked all together when a pool
is initialized.  Instead only "the first two" (lowest addresses) blocks are
set up, returning the first such block, and setting pool->freeblock to a
one-block list holding the second such block.

pymalloc strives at all levels (arena, pool, and block) never to touch a piece
of memory until it's actually needed.

Each pool has three states:

used — partially used, neither empty nor full
full — all the pool's blocks are currently allocated
empty — all the pool's blocks are currently available for allocation

In order to efficiently manage pools Python uses an additional array called usedpools. 
It stores pointers to the pools grouped by class

As we already know, all pools of the same block size are linked together. 
To iterate over them, we just need to know the start of the list. 
If there are no pools of such size, then a new pool will be created on the first memory request.

Note that pools and blocks are not allocating memory directly, instead, they are using already allocated space from arenas.

3. arena

The arena is a chunk of 256kB memory allocated on the heap, which provides memory for 64 pools.

The structure of the arena object looks like this:

struct arena_object {
    uintptr_t address;
    block* pool_address;
    uint nfreepools;
    uint ntotalpools;
    struct pool_header* freepools;
    struct arena_object* nextarena;
    struct arena_object* prevarena;
};

All arenas are linked using doubly linked list (the nextarena and prevarena fields), it helps to manage them. 
The ntotalpools and nfreepools are storing information about currently available pools.

The freepools field points to the linked list of available pools.

There is nothing complicated in the implementation of the arena. 
Think of it as a list of containers, which automatically allocates new memory for pools when needed.

Deallocation

An arena gets fully released If and only if all the pools in it are empty. For example, it can happen when you use a lot of temporary objects in a short period of time.

Speaking of long-running Python processes, they may hold a lot of unused memory because of this behavior.